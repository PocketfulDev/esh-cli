name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # First run all tests to ensure quality
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests with coverage and JSON output
      run: |
        # Create build directory for outputs
        mkdir -p build
        # Run tests with JSON output for better reporting
        go test -v -race -coverprofile=build/coverage.out -covermode=atomic -json ./... > build/test-results.json
        go tool cover -html=build/coverage.out -o build/coverage.html
        go tool cover -func=build/coverage.out > build/coverage-func.txt

    - name: Parse test results
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: Release Tests
        path: build/test-results.json
        reporter: golang-json
        fail-on-error: true

    - name: Upload test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-test-and-coverage-results
        path: |
          build/test-results.json
          build/coverage.out
          build/coverage.html
          build/coverage-func.txt

    - name: Check test coverage threshold with summary
      run: |
        COVERAGE=$(go tool cover -func=build/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total test coverage: ${COVERAGE}%"
        
        # Generate GitHub Actions summary for release
        echo "## 🚀 Release Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Overall Coverage | ${COVERAGE}% | $([ $(echo "$COVERAGE >= 30" | bc -l) -eq 1 ] && echo "✅ Pass" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "$COVERAGE < 30" | bc -l) )); then
          echo "❌ Test coverage is below 30% threshold: ${COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
          echo "This is too low for a release. Please add more tests." | tee -a $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ Test coverage meets threshold: ${COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
        fi
        
        # Extract utils package coverage from existing coverage data (avoid redundant test run)
        UTILS_LINES=$(go tool cover -func=build/coverage.out | grep "pkg/utils" | wc -l)
        if [ "$UTILS_LINES" -gt 0 ]; then
          UTILS_COVERAGE=$(go tool cover -func=build/coverage.out | grep "pkg/utils" | awk '{sum+=$3; count++} END {if(count>0) printf "%.1f", sum/count; else print "0"}')
        else
          UTILS_COVERAGE="0.0"
        fi
        echo "Utils package coverage: ${UTILS_COVERAGE}%"
        echo "| Utils Package | ${UTILS_COVERAGE}% | $([ $(echo "$UTILS_COVERAGE >= 60" | bc -l) -eq 1 ] && echo "✅ Pass" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
        
        if (( $(echo "$UTILS_COVERAGE < 60" | bc -l) )); then
          echo "❌ Utils package coverage is below 60%: ${UTILS_COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
          echo "Business logic should have better test coverage." | tee -a $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Add detailed coverage breakdown
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat build/coverage-func.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Build and release only after tests pass
  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build binaries
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Build for macOS (Intel)
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION" -o esh-cli-darwin-amd64 .
        
        # Build for macOS (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=$VERSION" -o esh-cli-darwin-arm64 .
        
        # Build for Linux (x86_64)
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION" -o esh-cli-linux-amd64 .
        
        # Build for Linux (ARM64)
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=$VERSION" -o esh-cli-linux-arm64 .

    - name: Create archives
      run: |
        # Create tar.gz archives
        tar -czf esh-cli-darwin-amd64.tar.gz esh-cli-darwin-amd64
        tar -czf esh-cli-darwin-arm64.tar.gz esh-cli-darwin-arm64
        tar -czf esh-cli-linux-amd64.tar.gz esh-cli-linux-amd64
        tar -czf esh-cli-linux-arm64.tar.gz esh-cli-linux-arm64

    - name: Generate checksums
      run: |
        sha256sum esh-cli-*.tar.gz > checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          esh-cli-*.tar.gz
          checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
