name: Update Badges

on:
  push:
    branches: [ main ]
  schedule:
    # Update badges daily at 00:00 UTC
    - cron: '0 0 * * *'

jobs:
  update-badges:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run tests and generate coverage
      run: |
        mkdir -p build
        go test -v -coverprofile=build/coverage.out -covermode=atomic ./...
        go tool cover -func=build/coverage.out > build/coverage-func.txt

    - name: Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=build/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
        
        # Determine color based on coverage
        if [ $(echo "$COVERAGE >= 80" | awk '{print ($1 >= 80)}') -eq 1 ]; then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif [ $(echo "$COVERAGE >= 60" | awk '{print ($1 >= 60)}') -eq 1 ]; then
          echo "color=yellow" >> $GITHUB_OUTPUT
        elif [ $(echo "$COVERAGE >= 30" | awk '{print ($1 >= 30)}') -eq 1 ]; then
          echo "color=orange" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi

    - name: Check if badge secrets are available
      id: badge-check
      run: |
        if [ -n "${{ secrets.GIST_ID }}" ]; then
          echo "badges-enabled=true" >> $GITHUB_OUTPUT
        else
          echo "badges-enabled=false" >> $GITHUB_OUTPUT
          echo "⚠️ GIST_ID secret not configured - badges will be skipped"
        fi

    - name: Create coverage badge
      if: steps.badge-check.outputs.badges-enabled == 'true'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GITHUB_TOKEN }}
        gistID: ${{ secrets.GIST_ID }}
        filename: esh-cli-coverage.json
        label: coverage
        message: ${{ steps.coverage.outputs.coverage }}%
        color: ${{ steps.coverage.outputs.color }}

    - name: Get test count
      id: tests
      run: |
        TEST_COUNT=$(go test -v ./... 2>&1 | grep -c "=== RUN" || echo "0")
        echo "count=${TEST_COUNT}" >> $GITHUB_OUTPUT

    - name: Create test count badge
      if: steps.badge-check.outputs.badges-enabled == 'true'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GITHUB_TOKEN }}
        gistID: ${{ secrets.GIST_ID }}
        filename: esh-cli-tests.json
        label: tests
        message: ${{ steps.tests.outputs.count }} tests
        color: blue

    - name: Check build status
      id: build
      run: |
        mkdir -p build
        if go build -o build/esh-cli-test .; then
          echo "status=passing" >> $GITHUB_OUTPUT
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        else
          echo "status=failing" >> $GITHUB_OUTPUT
          echo "color=red" >> $GITHUB_OUTPUT
        fi

    - name: Create build status badge
      if: steps.badge-check.outputs.badges-enabled == 'true'
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GITHUB_TOKEN }}
        gistID: ${{ secrets.GIST_ID }}
        filename: esh-cli-build.json
        label: build
        message: ${{ steps.build.outputs.status }}
        color: ${{ steps.build.outputs.color }}
