name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests with race detection
      run: go test -v -race ./...

    - name: Run tests with coverage and JSON output
      run: |
        # Run tests with JSON output for better reporting
        go test -v -race -coverprofile=coverage.out -covermode=atomic -json ./... > test-results.json
        go tool cover -html=coverage.out -o coverage.html
        
        # Generate coverage report for different formats
        go tool cover -func=coverage.out > coverage-func.txt

    - name: Parse test results
      uses: dorny/test-reporter@v2
      if: success() || failure()
      with:
        name: Go Tests
        path: test-results.json
        reporter: golang-json
        fail-on-error: true

    - name: Upload test results and coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-and-coverage-results
        path: |
          test-results.json
          coverage.out
          coverage.html
          coverage-func.txt

    - name: Check test coverage and generate summary
      id: coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Total test coverage: ${COVERAGE}%"
        
        # Check utils package specifically (where business logic resides)
        UTILS_COVERAGE=$(go test -coverprofile=utils_coverage.out -covermode=atomic ./pkg/utils && go tool cover -func=utils_coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Utils package coverage: ${UTILS_COVERAGE}%"
        
        # Set outputs for PR comment
        echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
        echo "utils_coverage=${UTILS_COVERAGE}" >> $GITHUB_OUTPUT
        
        # Store coverage details for PR comment
        {
          echo "coverage_details<<"
          cat coverage-func.txt
          echo ""
        } >> $GITHUB_OUTPUT
        
        # Generate GitHub Actions summary
        echo "## üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Overall Coverage | ${COVERAGE}% | $([ $(echo "$COVERAGE >= 30" | bc -l) -eq 1 ] && echo "‚úÖ Pass" || echo "‚ö†Ô∏è Below Target") |" >> $GITHUB_STEP_SUMMARY
        echo "| Utils Package | ${UTILS_COVERAGE}% | $([ $(echo "$UTILS_COVERAGE >= 60" | bc -l) -eq 1 ] && echo "‚úÖ Pass" || echo "‚ö†Ô∏è Below Target") |" >> $GITHUB_STEP_SUMMARY
        
        # For CLI tools, we set a lower threshold since main execution paths require integration testing
        if (( $(echo "$COVERAGE < 30" | bc -l) )); then
          echo "‚ö†Ô∏è Warning: Test coverage is below 30% threshold" | tee -a $GITHUB_STEP_SUMMARY
          echo "Current coverage: ${COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
          echo "Note: CLI tools often have lower unit test coverage due to integration-heavy main logic" | tee -a $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ Test coverage meets threshold: ${COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
        fi
        
        if (( $(echo "$UTILS_COVERAGE < 60" | bc -l) )); then
          echo "‚ö†Ô∏è Warning: Utils package coverage is below 60%" | tee -a $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ Utils package coverage is good: ${UTILS_COVERAGE}%" | tee -a $GITHUB_STEP_SUMMARY
        fi
        
        # Add detailed coverage breakdown
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        cat coverage-func.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Build test and add to summary
      run: |
        go build -o esh-cli-test .
        ./esh-cli-test --version
        ./esh-cli-test --help
        
        # Add build info to summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üî® Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Binary compiled successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Version command works" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Help command works" >> $GITHUB_STEP_SUMMARY

  cross-platform-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Test cross-platform builds with summary
      run: |
        # Test building for different platforms
        echo "## üåç Cross-Platform Build Results" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Architecture | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------------|---------|" >> $GITHUB_STEP_SUMMARY
        
        platforms=("darwin/amd64" "darwin/arm64" "linux/amd64" "linux/arm64")
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r os arch <<< "$platform"
          binary_name="esh-cli-${os}-${arch}"
          
          if GOOS=$os GOARCH=$arch go build -o $binary_name .; then
            echo "| $os | $arch | ‚úÖ Success |" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Built $binary_name"
          else
            echo "| $os | $arch | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Failed to build $binary_name"
            exit 1
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ All cross-platform builds successful"

    # Add coverage comment to PR (only for pull requests)
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: coverage
        message: |
          ## üìä Test Coverage Report
          
          | Metric | Value | Status |
          |--------|--------|--------|
          | Overall Coverage | ${{ steps.coverage.outputs.coverage }}% | ${{ steps.coverage.outputs.coverage >= 30 && '‚úÖ Pass' || '‚ö†Ô∏è Below Target (30%)' }} |
          | Utils Package | ${{ steps.coverage.outputs.utils_coverage }}% | ${{ steps.coverage.outputs.utils_coverage >= 60 && '‚úÖ Pass' || '‚ö†Ô∏è Below Target (60%)' }} |
          
          <details>
          <summary>üìã Detailed Coverage</summary>
          
          ```
          ${{ steps.coverage.outputs.coverage_details }}
          ```
          </details>
          
          > üí° **Note**: CLI tools often have lower overall coverage due to integration-heavy main logic. The utils package contains the core business logic and should maintain higher coverage.
